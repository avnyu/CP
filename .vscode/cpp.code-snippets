{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"C++ default": {
		"prefix": "cpp",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"#define ll long long",
			"#define ii pair<int, int>",
			"#define pll pair<ll, ll>",
			"#define dd pair<double, double>",
			"#define vi vector<int>",
			"#define vl vector<ll>",
			"#define vd vector<double>",
			"#define vii vector<ii>",
			"#define vll vector<pll>",
			"#define vdd vector<dd>",
			"#define vvi vector<vi>",
			"#define vvl vector<vl>",
			"#define vvd vector<vd>",
			"#define vvii vector<vii>",
			"#define vvll vector<vll>",
			"#define vvdd vector<vdd>",
			"#define fi first",
			"#define se second",
			"#define uni(v) v.erase(unique(v.begin(), v.end()), v.end())",
			"#define gcd(a, b) __gcd(a, b)",
			"#define lcm(a, b) (ll) a / __gcd(a, b) * b",
			"",
			"using namespace std;",
			"",
			"void print();",
			"template <typename T, typename... Args>",
			"void print(T x, Args... args);",
			"",
			"void solve(int T) {",
			"",
			"}",
			"int main() {",
			"    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
			"",
			"    int t = 1;",
			"    cin >> t;",
			"    for (int i = 0; i++ < t;) solve(i);",
			"",
			"    return 0;",
			"}",
			"",
			"void print() { cout << \"\\n\"; }",
			"template <typename T, typename... Args>",
			"void print(T x, Args... args) {",
			"    if (sizeof...(args)) {",
			"        cout << x << ' ';",
			"        print(args...);",
			"    } else {",
			"        cout << x << '\\n';",
			"    }",
			"}"
		],
		"description": "C++ default"
	},
	"CHT": {
		"prefix": "cht",
		"body": [
			"namespace CHT {",
			"const ll M = INT64_MAX;",
			"vector<pll> cht;",
			"vector<double> pt;",
			"double intersect(pll &x, pll &y) { return double(x.se - y.se) / (y.fi - x.fi); }",
			"void add(pll line) {",
			"    if (cht.size() && cht.back().fi == line.fi) {",
			"        pt.pop_back();",
			"        cht.pop_back();",
			"    }",
			"    while (cht.size() && intersect(cht.back(), line) <= pt.back()) {",
			"        pt.pop_back();",
			"        cht.pop_back();",
			"    }",
			"    pt.push_back(cht.empty() ? -M : intersect(cht.back(), line));",
			"    cht.push_back(line);",
			"}",
			"void add_lines(vector<pll> lines) {",
			"    int n = lines.size();",
			"    sort(lines.begin(), lines.end());",
			"    for (int i = 0; i < n; ++i) add(lines[i]);",
			"}",
			"ll get(ll x) {",
			"    auto p = upper_bound(pt.begin(), pt.end(), double(x)) - pt.begin() - 1;",
			"    return cht[p].fi * x + cht[p].se;",
			"}",
			"void reset() {",
			"    cht.clear();",
			"    pt.clear();",
			"}",
			"}  // namespace CHT"
		],
		"description": "CHT"
	},
	"Fast pow with mod": {
		"prefix": "fpow",
		"body": [
			"ll fpow(ll b, ll n, ll m = M) {",
			"\tll res = 1;",
			"\twhile (n) {",
			"\t\tif (n & 1) res = (res * b) % m;",
			"\t\tn >>= 1;",
			"\t\tb = (b * b) % m;",
			"\t}",
			"\treturn res;",
			"}"
		],
		"description": "Fast pow with mod"
	},
	"RB Tree": {
		"prefix": "rbtree",
		"body": [
			"using namespace __gnu_pbds;",
			"",
			"template <typename T>",
			"using rbtree =",
			"\ttree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
		],
		"description": "Red-black Tree"
	},
	"Euler's Totient": {
		"prefix": "eulertotient",
		"body": [
			"ll eulerTotient(ll n) {",
			"\tif (n == 0) return 0;",
			"\tll ans = n;",
			"\tfor (ll x = 2; x * x <= n; ++x) {",
			"\t\tif (n % x == 0) {",
			"\t\t\tans -= ans / x;",
			"\t\t\twhile (n % x == 0) n /= x;",
			"\t\t}",
			"\t}",
			"\tif (n > 1) ans -= ans / n;",
			"\treturn ans;",
			"}"
		],
		"description": "Euler's Totient"
	}
}